#if !canImport(ObjectiveC)
import XCTest

extension AssertionNotificationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssertionNotificationTests = [
        ("testCreateMethod", testCreateMethod),
        ("testCreateMethodWithEmptyData", testCreateMethodWithEmptyData),
        ("testCustomDebugStringConvertible", testCustomDebugStringConvertible),
        ("testCustomStringConvertible", testCustomStringConvertible),
        ("testEquatableWithDifferentFile", testEquatableWithDifferentFile),
        ("testEquatableWithDifferentLine", testEquatableWithDifferentLine),
        ("testEquatableWithDifferentMessage", testEquatableWithDifferentMessage),
        ("testEquatableWithSameData", testEquatableWithSameData),
    ]
}

extension BetweenBoundsComparableTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BetweenBoundsComparableTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testInRange", testInRange),
        ("testMaximumEqual", testMaximumEqual),
        ("testMinimumEqual", testMinimumEqual),
        ("testOutOfRangeMaximum", testOutOfRangeMaximum),
        ("testOutOfRangeMinimum", testOutOfRangeMinimum),
    ]
}

extension BetweenBoundsDifferentBinaryIntegerTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BetweenBoundsDifferentBinaryIntegerTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testInRange", testInRange),
        ("testMaximumEqual", testMaximumEqual),
        ("testMinimumEqual", testMinimumEqual),
        ("testOutOfRangeMaximum", testOutOfRangeMaximum),
        ("testOutOfRangeMinimum", testOutOfRangeMinimum),
    ]
}

extension BetweenBoundsSameBinaryIntegerTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BetweenBoundsSameBinaryIntegerTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testInRange", testInRange),
        ("testMaximumEqual", testMaximumEqual),
        ("testMinimumEqual", testMinimumEqual),
        ("testOutOfRangeMaximum", testOutOfRangeMaximum),
        ("testOutOfRangeMinimum", testOutOfRangeMinimum),
    ]
}

extension BetweenClosedRangeComparableTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BetweenClosedRangeComparableTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testInRange", testInRange),
        ("testMaximumEqual", testMaximumEqual),
        ("testMinimumEqual", testMinimumEqual),
        ("testOutOfRangeMaximum", testOutOfRangeMaximum),
        ("testOutOfRangeMinimum", testOutOfRangeMinimum),
    ]
}

extension BetweenMinMaxComparableTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BetweenMinMaxComparableTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testInRange", testInRange),
        ("testMaximumEqual", testMaximumEqual),
        ("testMinimumEqual", testMinimumEqual),
        ("testOutOfRangeMaximum", testOutOfRangeMaximum),
        ("testOutOfRangeMinimum", testOutOfRangeMinimum),
    ]
}

extension BetweenMinMaxDifferentBinaryIntegerTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BetweenMinMaxDifferentBinaryIntegerTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testInRange", testInRange),
        ("testMaximumEqual", testMaximumEqual),
        ("testMinimumEqual", testMinimumEqual),
        ("testOutOfRangeMaximum", testOutOfRangeMaximum),
        ("testOutOfRangeMinimum", testOutOfRangeMinimum),
    ]
}

extension BetweenMinMaxSameBinaryIntegerTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BetweenMinMaxSameBinaryIntegerTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testInRange", testInRange),
        ("testMaximumEqual", testMaximumEqual),
        ("testMinimumEqual", testMinimumEqual),
        ("testOutOfRangeMaximum", testOutOfRangeMaximum),
        ("testOutOfRangeMinimum", testOutOfRangeMinimum),
    ]
}

extension BetweenRangeComparableTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BetweenRangeComparableTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testInRange", testInRange),
        ("testMaximumEqual", testMaximumEqual),
        ("testMinimumEqual", testMinimumEqual),
        ("testOutOfRangeMaximum", testOutOfRangeMaximum),
        ("testOutOfRangeMinimum", testOutOfRangeMinimum),
    ]
}

extension BoolAssertionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BoolAssertionsTests = [
        ("testIsFalseCustomMessage", testIsFalseCustomMessage),
        ("testIsFalseDefaultMessage", testIsFalseDefaultMessage),
        ("testIsFalseNotValidCase", testIsFalseNotValidCase),
        ("testIsFalseValidCase", testIsFalseValidCase),
        ("testIsTrueCustomMessage", testIsTrueCustomMessage),
        ("testIsTrueDefaultMessage", testIsTrueDefaultMessage),
        ("testIsTrueNotValidCase", testIsTrueNotValidCase),
        ("testIsTrueValidCase", testIsTrueValidCase),
    ]
}

extension ClassAssertionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ClassAssertionsTests = [
        ("testIsNotSameInstanceAsCustomMessage", testIsNotSameInstanceAsCustomMessage),
        ("testIsNotSameInstanceAsDefaultMessage", testIsNotSameInstanceAsDefaultMessage),
        ("testIsNotSameInstanceAsNotValidCase", testIsNotSameInstanceAsNotValidCase),
        ("testIsNotSameInstanceAsValidCase", testIsNotSameInstanceAsValidCase),
        ("testIsSameInstanceAsCustomMessage", testIsSameInstanceAsCustomMessage),
        ("testIsSameInstanceAsDefaultMessage", testIsSameInstanceAsDefaultMessage),
        ("testIsSameInstanceAsNotValidCase", testIsSameInstanceAsNotValidCase),
        ("testIsSameInstanceAsValidCase", testIsSameInstanceAsValidCase),
    ]
}

extension ContainedInSequenceTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ContainedInSequenceTypesTests = [
        ("testContainedInCustomMessage", testContainedInCustomMessage),
        ("testContainedInDefaultMessage", testContainedInDefaultMessage),
        ("testContainedInEmptyArray", testContainedInEmptyArray),
        ("testContainedInNotValidCase", testContainedInNotValidCase),
        ("testContainedInSampleArray", testContainedInSampleArray),
        ("testNotContainedInCustomMessage", testNotContainedInCustomMessage),
        ("testNotContainedInDefaultMessage", testNotContainedInDefaultMessage),
        ("testNotContainedInEmptyArray", testNotContainedInEmptyArray),
        ("testNotContainedInNotValidCase", testNotContainedInNotValidCase),
        ("testNotContainedInSampleArray", testNotContainedInSampleArray),
    ]
}

extension EquatableAssertionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EquatableAssertionsTests = [
        ("testIsEqualToCustomMessage", testIsEqualToCustomMessage),
        ("testIsEqualToDefaultMessage", testIsEqualToDefaultMessage),
        ("testIsEqualToNotValidCase", testIsEqualToNotValidCase),
        ("testIsEqualToValidCase", testIsEqualToValidCase),
        ("testIsNotEqualToCustomMessage", testIsNotEqualToCustomMessage),
        ("testIsNotEqualToDefaultMessage", testIsNotEqualToDefaultMessage),
        ("testIsNotEqualToNotValidCase", testIsNotEqualToNotValidCase),
        ("testIsNotEqualToValidCase", testIsNotEqualToValidCase),
    ]
}

extension GreaterOrEqualComparableTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GreaterOrEqualComparableTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testEqualCondition", testEqualCondition),
        ("testGreaterCondition", testGreaterCondition),
        ("testLessCondition", testLessCondition),
    ]
}

extension GreaterOrEqualDifferentBinaryIntegerTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GreaterOrEqualDifferentBinaryIntegerTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testEqualCondition", testEqualCondition),
        ("testGreaterCondition", testGreaterCondition),
        ("testLessCondition", testLessCondition),
    ]
}

extension GreaterOrEqualSameBinaryIntegerTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GreaterOrEqualSameBinaryIntegerTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testEqualCondition", testEqualCondition),
        ("testGreaterCondition", testGreaterCondition),
        ("testLessCondition", testLessCondition),
    ]
}

extension GreaterThanComparableTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GreaterThanComparableTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testEqualCondition", testEqualCondition),
        ("testGreaterCondition", testGreaterCondition),
        ("testLessCondition", testLessCondition),
    ]
}

extension GreaterThanDifferentBinaryIntegerTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GreaterThanDifferentBinaryIntegerTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testEqualCondition", testEqualCondition),
        ("testGreaterCondition", testGreaterCondition),
        ("testLessCondition", testLessCondition),
    ]
}

extension GreaterThanSameBinaryIntegerTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GreaterThanSameBinaryIntegerTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testEqualCondition", testEqualCondition),
        ("testGreaterCondition", testGreaterCondition),
        ("testLessCondition", testLessCondition),
    ]
}

extension HasSizeCollectionTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HasSizeCollectionTypesTests = [
        ("testHasSizeCustomMessage", testHasSizeCustomMessage),
        ("testHasSizeDefaultMessage", testHasSizeDefaultMessage),
        ("testHasSizeEmptyArray", testHasSizeEmptyArray),
        ("testHasSizeNotValidCase", testHasSizeNotValidCase),
        ("testHasSizeSampleArray", testHasSizeSampleArray),
    ]
}

extension LessOrEqualThanComparableTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LessOrEqualThanComparableTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testEqualCondition", testEqualCondition),
        ("testGreaterCondition", testGreaterCondition),
        ("testLessCondition", testLessCondition),
    ]
}

extension LessOrEqualThanDifferentBinaryIntegerTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LessOrEqualThanDifferentBinaryIntegerTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testEqualCondition", testEqualCondition),
        ("testGreaterCondition", testGreaterCondition),
        ("testLessCondition", testLessCondition),
    ]
}

extension LessOrEqualThanSameBinaryIntegerTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LessOrEqualThanSameBinaryIntegerTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testEqualCondition", testEqualCondition),
        ("testGreaterCondition", testGreaterCondition),
        ("testLessCondition", testLessCondition),
    ]
}

extension LessThanComparableTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LessThanComparableTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testEqualCondition", testEqualCondition),
        ("testGreaterCondition", testGreaterCondition),
        ("testLessCondition", testLessCondition),
    ]
}

extension LessThanDifferentBinaryIntegerTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LessThanDifferentBinaryIntegerTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testEqualCondition", testEqualCondition),
        ("testGreaterCondition", testGreaterCondition),
        ("testLessCondition", testLessCondition),
    ]
}

extension LessThanSameBinaryIntegerTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LessThanSameBinaryIntegerTypesTests = [
        ("testCustomMessage", testCustomMessage),
        ("testDefaultMessage", testDefaultMessage),
        ("testEqualCondition", testEqualCondition),
        ("testGreaterCondition", testGreaterCondition),
        ("testLessCondition", testLessCondition),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AssertionNotificationTests.__allTests__AssertionNotificationTests),
        testCase(BetweenBoundsComparableTypesTests.__allTests__BetweenBoundsComparableTypesTests),
        testCase(BetweenBoundsDifferentBinaryIntegerTypesTests.__allTests__BetweenBoundsDifferentBinaryIntegerTypesTests),
        testCase(BetweenBoundsSameBinaryIntegerTypesTests.__allTests__BetweenBoundsSameBinaryIntegerTypesTests),
        testCase(BetweenClosedRangeComparableTypesTests.__allTests__BetweenClosedRangeComparableTypesTests),
        testCase(BetweenMinMaxComparableTypesTests.__allTests__BetweenMinMaxComparableTypesTests),
        testCase(BetweenMinMaxDifferentBinaryIntegerTypesTests.__allTests__BetweenMinMaxDifferentBinaryIntegerTypesTests),
        testCase(BetweenMinMaxSameBinaryIntegerTypesTests.__allTests__BetweenMinMaxSameBinaryIntegerTypesTests),
        testCase(BetweenRangeComparableTypesTests.__allTests__BetweenRangeComparableTypesTests),
        testCase(BoolAssertionsTests.__allTests__BoolAssertionsTests),
        testCase(ClassAssertionsTests.__allTests__ClassAssertionsTests),
        testCase(ContainedInSequenceTypesTests.__allTests__ContainedInSequenceTypesTests),
        testCase(EquatableAssertionsTests.__allTests__EquatableAssertionsTests),
        testCase(GreaterOrEqualComparableTypesTests.__allTests__GreaterOrEqualComparableTypesTests),
        testCase(GreaterOrEqualDifferentBinaryIntegerTypesTests.__allTests__GreaterOrEqualDifferentBinaryIntegerTypesTests),
        testCase(GreaterOrEqualSameBinaryIntegerTypesTests.__allTests__GreaterOrEqualSameBinaryIntegerTypesTests),
        testCase(GreaterThanComparableTypesTests.__allTests__GreaterThanComparableTypesTests),
        testCase(GreaterThanDifferentBinaryIntegerTypesTests.__allTests__GreaterThanDifferentBinaryIntegerTypesTests),
        testCase(GreaterThanSameBinaryIntegerTypesTests.__allTests__GreaterThanSameBinaryIntegerTypesTests),
        testCase(HasSizeCollectionTypesTests.__allTests__HasSizeCollectionTypesTests),
        testCase(LessOrEqualThanComparableTypesTests.__allTests__LessOrEqualThanComparableTypesTests),
        testCase(LessOrEqualThanDifferentBinaryIntegerTypesTests.__allTests__LessOrEqualThanDifferentBinaryIntegerTypesTests),
        testCase(LessOrEqualThanSameBinaryIntegerTypesTests.__allTests__LessOrEqualThanSameBinaryIntegerTypesTests),
        testCase(LessThanComparableTypesTests.__allTests__LessThanComparableTypesTests),
        testCase(LessThanDifferentBinaryIntegerTypesTests.__allTests__LessThanDifferentBinaryIntegerTypesTests),
        testCase(LessThanSameBinaryIntegerTypesTests.__allTests__LessThanSameBinaryIntegerTypesTests),
    ]
}
#endif
